@using System.Reflection

@model FlashSale.Areas.Admin.Model.PaginationModel

@{
    int currentPage = Model.CurrentPage;
    int totalPages = Model.TotalPages;
    int totalCount = Model.TotalCount;
    int pageSize = Model.PageSize;
    int pageRange = Model.PageRange;

    // Create a route values dictionary from the model using reflection
    var routeValues = new RouteValueDictionary();

    // Add the properties of PaginationModel to routeValues
    foreach (PropertyInfo property in typeof(FlashSale.Areas.Admin.Model.PaginationModel).GetProperties())
    {
        var value = property.GetValue(Model);
        if (value != null)
        {
            routeValues[property.Name] = value;
        }
    }
}

<nav aria-label="Page navigation" style="display:flex; justify-content:space-between; margin-left:12px;margin-right:12px">
    <div>
        <p>
            Hiển thị <span style="font-weight:bold">@Math.Min((currentPage - 1) * pageSize + 1, totalCount)</span>
            đến <span style="font-weight:bold">@Math.Min(currentPage * pageSize, totalCount)</span>
            trong tổng số <span style="font-weight:bold">@totalCount</span> mục
        </p>
    </div>
    <ul class="pagination">
        @if (currentPage > 1)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1, routeValues })" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }

        @if (currentPage > pageRange + 1)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { page = 1, routeValues })">1</a>
            </li>
            if (currentPage > pageRange + 2)
            {
                <li class="page-item disabled"><span class="page-link">...</span></li>
            }
        }

        @for (int pageNumber = Math.Max(1, currentPage - pageRange); pageNumber <= Math.Min(totalPages, currentPage + pageRange); pageNumber++)
        {
            <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                <a class="page-link" href="@Url.Action("Index", new { page = pageNumber, routeValues })">@pageNumber</a>
            </li>
        }

        @if (currentPage < totalPages - pageRange)
        {
            if (currentPage < totalPages - pageRange - 1)
            {
                <li class="page-item disabled"><span class="page-link">...</span></li>
            }
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { page = totalPages, routeValues })">@totalPages</a>
            </li>
        }

        @if (currentPage < totalPages)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1, routeValues })" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
    </ul>
</nav>

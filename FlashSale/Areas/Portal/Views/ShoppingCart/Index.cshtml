

@model FlashSale.Areas.Portal.Model.ShoppingCartModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Portal/Views/Shared/_Layout.cshtml";
}


@{
    var successModalViewModel = new FlashSale.Areas.Portal.Model.ModalViewReLoadModel
    {
        Title = "Thành công",
        SubClose = "Đóng",
        SubTitle = "Cập nhật giỏ hàng thành công!",
    };


    var errorModalViewModel = new FlashSale.Areas.Portal.Model.ModalViewReLoadModel
    {
        Title = "Thất bại",
        SubClose = "Đóng",
        SubTitle = "Cập nhật giỏ hàng không thành thành công. Vui lòng kiểm tra lại!",
    };
}

@Html.Partial("Modal/_SuccessModalReLoad", successModalViewModel)
@Html.Partial("Modal/_ErrorModalReLoad", errorModalViewModel)


<!-- Begin Li's Breadcrumb Area -->
<div class="breadcrumb-area">
    <div class="container">
        <div class="breadcrumb-content">
            <ul>
                <li><a href="index.html">Trang chủ</a></li>
                <li class="active">Giỏ hàng</li>
            </ul>
        </div>
    </div>
</div>
<!-- Li's Breadcrumb Area End Here -->
<!--Shopping Cart Area Strat-->
<div class="Shopping-cart-area pt-60 pb-60">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <form action="#">
                    <!-- Thêm input hidden chứa idShoppingCart -->
                    <input type="hidden" name="idShoppingCart" value="@Model.ID" />

                    <div class="table-content table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th class="li-product-remove">Xóa</th>
                                    <th class="li-product-thumbnail">Hình ảnh</th>
                                    <th class="cart-product-name">Sản phẩm</th>
                                    <th class="li-product-price">Giá bán</th>
                                    <th class="li-product-quantity">Số lượng</th>
                                    <th class="li-product-subtotal">Tổng cộng</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.listShoppingCartDetail)
                                {
                                    <tr>
                                        <td class="li-product-remove"><a onclick="confirmDelete('@Model.ID', '@item.ID')"><i class="fa fa-times"></i></a></td>
                                        <td class="li-product-thumbnail"><a href="#"><img src="@item.Image" alt="Li's Product Image" style="width:120px;"></a></td>
                                        <td class="li-product-name"><a href="#">@item.ProductName</a></td>
                                        <td class="li-product-price"><span class="amount"> @Html.Raw(String.Format("{0:N0}", item.UnitPrice))đ</span></td>
                                        <td class="quantity">
                                            <label>Số lượng</label>
                                            <div class="cart-plus-minus">
                                                <input type="hidden" name="idShoppingCartDetail" value="@item.ID" /> <!-- Thêm input hidden chứa idShoppingCartDetail -->
                                                <input class="cart-plus-minus-box" value="@item.Quantity" type="text">
                                                <div class="dec qtybutton"><i class="fa fa-angle-down"></i></div>
                                                <div class="inc qtybutton"><i class="fa fa-angle-up"></i></div>
                                            </div>
                                        </td>
                                        <td class="product-subtotal"><span class="amount">@Html.Raw(String.Format("{0:N0}", item.Total))đ</span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="coupon-all">
                                @if (string.IsNullOrEmpty(@Model.VoucherCode))
                                {
                                    <div class="coupon">
                                        <input id="voucherCode" class="input-text" name="VoucherCode" value="@Model.VoucherCode" placeholder="Mã giảm giá" type="text">
                                        <input class="button" name="apply_coupon" value="Áp dụng" type="button" onclick="applyVoucher()">
                                    </div>
                                }
                                else
                                {
                                    <div class="coupon">
                                        <input id="voucherCode" class="input-text" name="VoucherCode" value="@Model.VoucherCode" placeholder="Mã giảm giá" type="text" readonly>
                                        <input style="background-color:gray" value="Đã áp dụng" type="button">
                                    </div>
                                }
                                <div class="coupon2">
                                    <input class="button" name="update_cart" value="Cập nhật giỏ hàng" onclick="updateShoppingCart()" type="button">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-5 ml-auto">
                            <div class="cart-page-total">
                                <h2>Tổng đơn hàng</h2>
                                <ul>
                                    <li>Tổng tiền sản phẩm <span>@Html.Raw(String.Format("{0:N0}", Model.SubTotal))đ</span></li>
                                    <li>Số lượng <span>@Html.Raw(String.Format("{0:N0}", Model.TotalQuantity))</span></li>
                                    <li>Số tiền giảm <span>@Html.Raw(String.Format("{0:N0}", Model.DiscountAmount))</span></li>
                                    <li>Tổng thành tiền <span> @Html.Raw(String.Format("{0:N0}", Model.Total))đ</span></li>
                                </ul>
                                <a href="#">Tiến hành đặt hàng</a>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        function confirmDelete(groupID, shoppingCartID) {
                // Store the IDs in a hidden field or a variable
              window.groupIdToDelete = groupID;
              window.shoppingCartIdToDelete = shoppingCartID;

               Swal.fire({
                   title: 'Bạn có chắc muốn xóa sản phẩm này?',
                 //  text: 'Bạn có chắc muốn xóa sản phẩm này?',
                   icon: 'warning',
                   showCancelButton: true,
                   confirmButtonColor: '#3085d6',
                   cancelButtonColor: '#d33',
                   confirmButtonText: 'Có',
                   cancelButtonText: 'Không',
               }).then((result) => {
                   if (result.isConfirmed) {
                       deleteItem();
                   }
               });
            }

            function deleteItem() {
                const idShoppingCart = window.groupIdToDelete;
                const idShoppingCartDetails = parseInt(window.shoppingCartIdToDelete);

                // Perform the deletion using an AJAX call or redirect to a delete action
                $.ajax({
                    url: '@Url.Action("DeleteOrderShoppingCart", "ShoppingCart")', // Replace with your action and controller
                    type: 'POST',
                    data: { idShoppingCart: idShoppingCart, idShoppingCartDetails: idShoppingCartDetails },
                    success: function (result) {
                        Swal.fire({
                            title: 'Đã xóa sản phẩm',
                            //text: 'Item has been successfully deleted.',
                            icon: 'success',
                            confirmButtonText: 'Đóng'
                        }).then(() => {
                            // Reload the page after the user acknowledges the alert
                            location.reload(); // Refresh the page to reflect the changes
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                        Swal.fire({
                            title: 'Đã xảy ra lỗi',
                            //text: 'Item has been successfully deleted.',
                            icon: 'error',
                            confirmButtonText: 'Đóng'
                        }).then(() => {
                        });

                    }
                });
            }

        $(document).ready(function () {
            // Ensure that buttons are added only if they don't already exist
            $(".cart-plus-minus").each(function () {
                if ($(this).find(".qtybutton").length === 0) { // Check if buttons already exist
                    $(this).append('<div class="dec qtybutton"><i class="fa fa-angle-down"></i></div><div class="inc qtybutton"><i class="fa fa-angle-up"></i></div>');
                }
            });

            // Attach event handlers for the quantity buttons
            $(".qtybutton").off("click").on("click", function () {
                var $button = $(this);
                var $input = $button.siblings("input.cart-plus-minus-box");
                var oldValue = parseFloat($input.val());

                if ($button.hasClass('inc')) {
                    var newVal = oldValue + 1;
                } else {
                    // Ensure the quantity does not go below 1
                    if (oldValue > 1) {
                        var newVal = oldValue - 1;
                    } else {
                        newVal = 1; // Set to 1 if the quantity is already 1
                    }
                }

                $input.val(newVal);
            });
        });
        function updateShoppingCart() {
            // Lấy idShoppingCart
            const idShoppingCart = document.querySelector('input[name="idShoppingCart"]')?.value;

            if (!idShoppingCart) {
                console.error('idShoppingCart không tồn tại.');
                return;
            }

            // Tạo một mảng để lưu trữ các sản phẩm và số lượng tương ứng
            let cartItems = [];

            // Lặp qua từng dòng sản phẩm trong bảng giỏ hàng
            document.querySelectorAll('tr').forEach(function (row) {
                let idShoppingCartDetail = row.querySelector('input[name="idShoppingCartDetail"]')?.value; // Lấy ID sản phẩm
                let quantity = row.querySelector('.cart-plus-minus-box')?.value; // Lấy giá trị số lượng

                // Thêm sản phẩm và số lượng vào mảng
                if (idShoppingCartDetail && quantity) {
                    cartItems.push({
                        id: idShoppingCartDetail,
                        quantity: quantity
                    });
                }
            });

            if (cartItems.length === 0) {
                console.error('Không có sản phẩm nào trong giỏ hàng.');
                return;
            }

            // Gửi dữ liệu giỏ hàng về server
            fetch('/ShoppingCart/Update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]')?.value // Nếu có sử dụng CSRF token
                },
                body: JSON.stringify({ idShoppingCart, cartItems }) // Gửi idShoppingCart cùng với danh sách sản phẩm
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        $('#successModal').modal({
                            backdrop: 'static',
                            keyboard: false
                        });
                        // Cập nhật thành công, có thể refresh lại trang hoặc cập nhật UI
                     //   location.reload(); // Reload trang để thấy các cập nhật mới
                    } else {
                        // Xử lý lỗi nếu có
                        $('#errorModal').modal({
                            backdrop: 'static',
                            keyboard: false
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

       function applyVoucher() {
    // Get values from the input fields
                var voucherCode = document.getElementById('voucherCode').value;
                var modelId = document.getElementById('modelId').value;
                var modelIdShop = document.getElementById('modelIdShop').value;

                // Validate the voucher code
                if (voucherCode.trim() === '') {
                    alert('Vui lòng nhập mã giảm giá');
                    return;
                }

                // Post the voucher code and model IDs to the server
                $.ajax({
                    url: '@Url.Action("ApplyVoucher", "ShoppingCart")', // Adjust the URL as needed
                    type: 'POST',
                    data: {
                        voucherCode: voucherCode,  // Use the correct variable name
                        id: modelId,
                        idShop: modelIdShop
                    },
                    success: function(response) {
                        if (response.success) {
                            // If the response is successful, redirect to the shopping cart page
                            window.location.href = '/Portal/ShoppingCart/Index?id=' + modelId;
                        } else {
                            // If there's an error, show the error message
                            alert(response.message);
                        }
                    },
                    error: function() {
                        alert('Đã xảy ra lỗi khi áp dụng mã giảm giá.');
                    }
                });
        }


    </script>
}
